.. _ref-gis-forms-api:

===================
GeoDjango Forms API
===================

.. module:: django.contrib.gis.forms
   :synopsis: GeoDjango's forms API.

.. versionadded:: 1.3

Overview
========

GeoDjango ships with a forms API with rich map widgets for adding and editing
geographic data. There are two kinds of widgets:

* *Base widgets* can be seen as map backends: they take care of rendering a
  map from a specific mapping API (such as OpenLayers, OpenStreetMap, Google
  Maps, Yahoo! Mapsâ€¦).

* *Field widgets*, which are subclasses of base widgets, take care of setting
  the right drawing controls on the map, according to the type of geometry.

The following base widgets are provided:

* ``GeometryWidget`` is a basic OpenLayers widget which uses the Vector Map
  Level 0 WMS data hosted at Metacarta.

* ``OSMWidget`` is a ``GeometryWidget`` subclass which uses the map tiles from
  `OpenStreetMap`_.

* ``GMapWidget`` is another ``GeometryWidget`` subclass which renders a
  `Google Map`_

.. _OpenStreetMap: http://www.openstreetmap.org/
.. _Google Map: http://code.google.com/apis/maps/index.html

The mapping between model field, form fields and widgets is shown below (form
fields and widgets can be found in the django.contrib.gis.forms package):

======================= ======================= ========================
Model Fields            Form Fields             Form Widgets
======================= ======================= ========================
PointField              PointField              PointWidget
LineStringField         LineStringField         LineStringWidget
PolygonField            PolygonField            PolygonWidget
GeometryField           GeometryField           GeometryWidget
MultiPointField         MultiPointField         MultiPointWidget
MultiLineStringField    MultiLineStringField    MultiLineStringWidget
MultiPolygonField       MultiPolygonField       MultiPolygonWidget
GeometryCollectionField GeometryCollectionField GeometryCollectionWidget
======================= ======================= ========================

.. note::

    Due to upstream bugs in the OpenLayers library, the edition of
    geometry collections is not available yet.
    
    Furthermore, OpenLayers 2.10 is not able to *edit* existing MultiPoint
    fields (adding new instances will work). MultiPoints can be edited using
    OpenLayers 2.9.

Forms
=====

The GeoDjango forms library extends Django's form library, which means that
you can safely use this library in standard Django forms. Geo-enabling a form
is as simple as changing::

    from django import forms

to::

    from django.contrib.gis import forms

Geographic fields can be added thusly::

    class MyForm(forms.Form):
        location = forms.PointField()

The form can then be rendered in your templates, validated in your view code
just like standard Django forms. Make sure you include the form's media files
when rendering the form.

ModelForms
==========

Since Django 1.3, geographic fields integrates nicely with rich form widgets.
Suppose you have a model with a geographic field::

    from django.contrib.gis.db import models

    class Poi(models.Model):
        name = models.CharField(max_length=255)
	area = models.PolygonField()

You can automatically get the corresponding ``ModelForm``::

    class PoiForm(forms.ModelForm):
        class Meta:
	    model = Poi

Using a custom base widget
==========================

Standard forms
--------------

The default fields use the basic ``GeometryWidget``. If you want to use the
``OSMWidget`` or the ``GMapWidget``, you need to define your own widgets as
such::

    from django.contrib.gis import forms

    class GMapPointWidget(forms.GMapWidget, forms.PointWidget):
        pass

    class GMapPointField(forms.PointField):
        widget = GMapPointWidget

``MyForm`` can be rewritten to use a Google Map widget::

    class MyForm(forms.Form):
        location = forms.GMapPointField()

ModelForms
----------

With ``ModelForms``, only the custom widgets need to be declared. The previous
``PoiForm`` can be rewritten::

    from django.contrib.gis import forms

    class GMapPolygonWidget(forms.GMapWidget, forms.PolygonWidget):
        pass

    class PoiForm(forms.ModelForm):
        class Meta:
	    model = Poi
	    widgets = {
                'location': GMapPolygonWidget,
            }

.. _ref-gis-widgets-api:

Customizing the map widgets
===========================

The GeometryWidget and its subclasses can be customized by setting specific
attributes to change the rendering behaviour of the widget. The following
attributes are available:

.. class:: GeometryWidget

   .. attribute:: color

   The color of the vertices drawn on the map, in ``rgb`` or ``rrggbb``
   format. Defaults to OpenLayer's default color, ``'ee9900'``.

   .. attribute:: default_lon

   The default center longitude. Defaults to ``0``.

   .. attribute:: default_lat

   The default center latitude. Defaults to ``0``.

   .. attribute:: default_zoom

   The default zoom level. Defaults to ``4``.

   .. attribute:: display_srid

   The SRID to use for the display projection. Defaults to ``False``,
   OpenLayers will use the map SRID if ``display_srid`` is not set.

   .. attribute:: display_wkt

   If ``True``, a ``<textarea>`` containing the WKT serialization of the
   features drawn on the map is displayed under the map. Useful for debugging.
   Defaults to ``False``.

   .. attribute:: layerswitcher

   Whether to show the OpenLayers layer switcher control. Defaults to
   ``True``.

   .. attribute:: map_width

   The width of the map, in pixels. Defaults to ``600``.

   .. attribute:: map_height

   The height of the map, in pixels. Defaults to ``400``.

   .. attribute:: map_srid

   The SRID to use on the map. Defaults to ``4326``.

   .. attribute:: map_template

   The name of the template used to render the map widget. Defaults to
   ``'gis/widget.html'``.

   .. attribute:: max_extent

   A series of coordinates (left, bottom, right, top) defining the bounds of
   the map. Defaults to ``False``, OpenLayers uses its default value:
   ``-180,-90,180,90``.

   .. note::

      ``max_extent``, ``max_resolution``, ``max_zoom``, ``min_zoom``,
      ``num_zoom`` and ``units`` cannot be set all at once. They are
      conflicting, please refer to the OpenLayers documentation to see which
      need to be set depending on your needs.

   .. attribute:: max_resolution

   The number of *map units per pixels* at the highest zoom level. Defaults to
   ``1.40625``, the default projection being the Spherical Mercator
   projection.

   .. attribute:: max_zoom

   The maximal zoom level of the map. Defaults to ``False``.

   .. attribute:: min_zoom

   The minimal zoom level of the map. Defaults to ``False``.

   .. attribute:: modifiable

   When set to ``False``, disables editing of existing geometry fields on the
   map. Defaults to ``True``.

   .. note::

      In the admin this is different from adding the geometry field to
      ``readonly_fields``, which will only display the WKT of the geometry.
      Setting ``modifiable=False``, actually displays the geometry in a map,
      but disables the ability to edit its vertices.

   .. attribute:: mouse_position

   Switch to display the coordinates of the mouse on the corner of the map.
   Defaults to ``True``.

   .. attribute:: num_zoom

   The number of zoom levels to enable on the map. Defaults to ``18``.

   .. attribute:: opacity

   The opacity of the inner part of the vertices drawn on the map (most
   relevant for Polygons). Defaults to OpenLayer's default, ``0.4``.

   .. attribute:: point_zoom

   The zoom level to set when an existing point field is edited. Defaults to
   ``num_zoom - 6``, ``12``.

   .. attribute:: scale_text

   Switch to display the current scale on the corner of the map. Defaults to
   ``True``.

   .. attribute:: scrollable

   Switch to enable / disable the zoom wheel on the map. Defaults to ``True``.

   .. attribute:: units

   The units of the map. Defaults to ``False``.

   .. attribute:: wms_url

   The URL of the WMS to fetch the map from. Defaults to
   ``'http://labs.metacarta.com/wms/vmap0'``

   .. attribute:: wms_layer

   The layer to use from the WMS. Defaults to ``'basic'``.

   .. attribute:: wms_name

   The name of the WMS on the map. Defaults to ``'OpenLayers WMS'``.

Writing a custom base widget
============================

The role of base widgets is to pass a number of parameters to a template.
Assuming you want to rely on OpenLayers, writing a custom widget can be done
easily by overriding the default templates. Look at the different templates in
the ``django/contrib/gis/templates/gis`` directory for examples.

If you cannot use OpenLayers, you need to find a way to draw features,
serialize them as WKT and dynamically fill hidden form inputs corresponding to
the fields. See also the code in ``django.contrib.gis.admin.options`` for the
internals of the default ``GeometryWidget`` if you need custom rendering
logic.
